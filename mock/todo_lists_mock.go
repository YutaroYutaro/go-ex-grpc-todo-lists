// Code generated by MockGen. DO NOT EDIT.
// Source: go-ex-grpc-todo-lists/proto (interfaces: TodoManagerClient,TodoManager_GetTodoListsClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "go-ex-grpc-todo-lists/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockTodoManagerClient is a mock of TodoManagerClient interface
type MockTodoManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoManagerClientMockRecorder
}

// MockTodoManagerClientMockRecorder is the mock recorder for MockTodoManagerClient
type MockTodoManagerClientMockRecorder struct {
	mock *MockTodoManagerClient
}

// NewMockTodoManagerClient creates a new mock instance
func NewMockTodoManagerClient(ctrl *gomock.Controller) *MockTodoManagerClient {
	mock := &MockTodoManagerClient{ctrl: ctrl}
	mock.recorder = &MockTodoManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoManagerClient) EXPECT() *MockTodoManagerClientMockRecorder {
	return m.recorder
}

// GetTodo mocks base method
func (m *MockTodoManagerClient) GetTodo(arg0 context.Context, arg1 *proto.GetTodoRequest, arg2 ...grpc.CallOption) (*proto.Todo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodo", varargs...)
	ret0, _ := ret[0].(*proto.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo
func (mr *MockTodoManagerClientMockRecorder) GetTodo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoManagerClient)(nil).GetTodo), varargs...)
}

// GetTodoLists mocks base method
func (m *MockTodoManagerClient) GetTodoLists(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (proto.TodoManager_GetTodoListsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodoLists", varargs...)
	ret0, _ := ret[0].(proto.TodoManager_GetTodoListsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoLists indicates an expected call of GetTodoLists
func (mr *MockTodoManagerClientMockRecorder) GetTodoLists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoLists", reflect.TypeOf((*MockTodoManagerClient)(nil).GetTodoLists), varargs...)
}

// MockTodoManager_GetTodoListsClient is a mock of TodoManager_GetTodoListsClient interface
type MockTodoManager_GetTodoListsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoManager_GetTodoListsClientMockRecorder
}

// MockTodoManager_GetTodoListsClientMockRecorder is the mock recorder for MockTodoManager_GetTodoListsClient
type MockTodoManager_GetTodoListsClientMockRecorder struct {
	mock *MockTodoManager_GetTodoListsClient
}

// NewMockTodoManager_GetTodoListsClient creates a new mock instance
func NewMockTodoManager_GetTodoListsClient(ctrl *gomock.Controller) *MockTodoManager_GetTodoListsClient {
	mock := &MockTodoManager_GetTodoListsClient{ctrl: ctrl}
	mock.recorder = &MockTodoManager_GetTodoListsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoManager_GetTodoListsClient) EXPECT() *MockTodoManager_GetTodoListsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockTodoManager_GetTodoListsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockTodoManager_GetTodoListsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).Context))
}

// Header mocks base method
func (m *MockTodoManager_GetTodoListsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockTodoManager_GetTodoListsClient) Recv() (*proto.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockTodoManager_GetTodoListsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockTodoManager_GetTodoListsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockTodoManager_GetTodoListsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockTodoManager_GetTodoListsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTodoManager_GetTodoListsClient)(nil).Trailer))
}
